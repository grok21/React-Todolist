{"version":3,"sources":["context/alert/alertContext.js","context/firebase/firebaseContext.js","components/Form.js","components/Notes.js","components/Loader.js","pages/Home.js","pages/About.js","components/Navbar.js","components/Alert.js","context/alert/alertReducer.js","context/types.js","context/alert/AlertState.js","context/firebase/firebaseReducer.js","context/firebase/FirebaseState.js","App.js","serviceWorker.js","index.js"],"names":["AlertContext","createContext","FirebaseContext","Form","useState","value","setValue","alert","useContext","firebase","onSubmit","event","preventDefault","trim","addNote","then","show","catch","className","type","placeholder","onChange","e","target","Notes","notes","onRemove","TransitionGroup","component","map","note","CSSTransition","key","id","classNames","timeout","title","date","onClick","Loader","role","Home","loading","fetchNotes","removeNote","useEffect","About","Navbar","to","exact","Alert","hide","in","visible","enter","exit","mountOnEnter","unmountOnExit","text","aria-label","aria-hidden","handlers","state","payload","alertReducer","action","DEFAULT","AlertState","children","useReducer","dispatch","Provider","console","log","filter","firebaseReducer","url","process","FirebaseState","showLoader","a","axios","get","res","Object","keys","data","Date","toJSON","post","name","Error","message","delete","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.2c20a060.chunk.js","sourcesContent":["import {createContext} from 'react'\n\nexport const AlertContext = createContext()","import { createContext } from 'react'\n\nexport const FirebaseContext = createContext()","import React, {useState, useContext} from 'react'\nimport { AlertContext } from '../context/alert/alertContext'\nimport { FirebaseContext } from '../context/firebase/firebaseContext'\n\nexport const Form = () => {\n    const [value, setValue] = useState('')\n    const alert = useContext(AlertContext)\n    const firebase = useContext(FirebaseContext)\n\n    const submitHandler = event => {\n        event.preventDefault()\n        \n        if (value.trim()) {\n            firebase.addNote(value.trim()).then(() => {\n                alert.show('Note has been created', 'success')\n            }).catch(() => {\n                alert.show('Something gone wrong...', 'danger')\n            })\n            \n            setValue('')\n        } else { \n            alert.show('Enter todo title')\n        }\n        \n        \n    }\n\n    return (\n        <form onSubmit={submitHandler}>\n            <div className=\"form-group input-note note\">\n                <input type=\"text\" \n                       className=\"form-control\"\n                       placeholder=\"Enter todo title\"\n                       value={value}\n                       onChange={e => setValue(e.target.value)}\n                       />\n            </div>\n        </form>\n    )\n}","import React from 'react'\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\n\nexport const Notes = ({notes, onRemove}) => (\n    <TransitionGroup component=\"ul\" className=\"list-group\">\n        {notes.map(note => (<CSSTransition key={note.id}\n                                           classNames={'note'}\n                                           timeout={1000}\n                            >\n                              <li className=\"list-group-item note\">\n                                <div>\n                                  <strong>{note.title}</strong>\n                                  <small>{note.date}</small>\n                                </div>\n                                <button type=\"button\" \n                                        className=\"btn btn-outline-danger btn-sm\"\n                                        onClick={() => onRemove(note.id)}\n                                >&times;\n                                </button>\n                              </li>\n                            </CSSTransition>))}        \n    </TransitionGroup>\n)","import React from 'react'\n\nexport const Loader = () => (\n        <div className=\"text-center\">\n            <div className=\"spinner-border text-dark\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n        </div>\n)","import React, {Fragment, useContext, useEffect} from 'react'\nimport { Form } from '../components/Form'\nimport { Notes } from '../components/Notes'\nimport { FirebaseContext } from '../context/firebase/firebaseContext'\nimport { Loader } from '../components/Loader'\n\nexport const Home = () => {\n    const {loading, notes, fetchNotes, removeNote} = useContext(FirebaseContext)\n    useEffect(() => {\n        fetchNotes()\n        // eslint-disable-next-line\n    }, [])\n    return (\n        <Fragment>\n            <Form />\n            <hr className=\"note\"/>\n            {loading ? <Loader/> : <Notes notes={notes} onRemove={removeNote} />}                                 \n        </Fragment>\n    )\n}","import React from 'react'\n\nexport const About = () => (\n        <div className=\"jumbotron\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">Best react app</h1>\n                <p className=\"lead\">Version <strong>1.0</strong></p>\n            </div>\n        </div>\n    )","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nexport const Navbar = () => (\n    <nav className=\"navbar navbar-dark navbar-expand-lg bg-primary\">\n        <div className=\"navbar-brand\">\n            React Todolist\n        </div>  \n\n        <ul className=\"navbar-nav\">\n            <li className=\"nav-item\">\n                <NavLink \n                    className=\"nav-link\" \n                    to=\"/\" \n                    exact>Home</NavLink>\n            </li>\n            <li className=\"nav-item\">\n                <NavLink \n                    className=\"nav-link\" \n                    to=\"/about\"\n                    exact>About</NavLink>\n            </li>\n        </ul>\n    </nav>\n)","import React, { useContext } from 'react'\nimport { CSSTransition } from 'react-transition-group'\nimport { AlertContext } from '../context/alert/alertContext'\n\nexport const Alert = () => {\n    const {alert, hide} = useContext(AlertContext)\n\n    return (\n        <CSSTransition\n          in={alert.visible}\n          timeout={{\n              enter: 500, \n              exit: 350\n          }}\n          classNames={'alerts'}\n          mountOnEnter\n          unmountOnExit\n        >\n          <div className={`alert alert-${alert.type || 'warning'} alert-dismissible input-note`}>\n            <strong>Alert!</strong>\n            &nbsp;{alert.text}\n            <button onClick={hide} type=\"button\" className=\"close\" aria-label=\"Close\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n        </CSSTransition>\n    )\n}","import {HIDE_ALERT, SHOW_ALERT} from '../types'\n\nconst handlers = {\n    [SHOW_ALERT]: (state, {payload}) => ({...payload, visible: true}),\n    [HIDE_ALERT]: (state) => ({...state, visible: false}), \n    DEFAULT: state => state, \n\n}\n\nexport const alertReducer = (state, action) => {\n    const handle = handlers[action.type] || handlers.DEFAULT\n    return handle(state, action)\n}","export const SHOW_ALERT = 'SHOW_ALERT'\nexport const HIDE_ALERT = 'HIDE_ALERT'\n\nexport const SHOW_LOADER = 'SHOW_LOADER'\nexport const ADD_NOTE = 'ADD_NOTE'\nexport const FETCH_NOTES = 'FETCH_NOTES'\nexport const REMOVE_NOTE = 'REMOVE_NOTE'","import React, {useReducer} from 'react'\nimport {AlertContext} from './alertContext'\nimport {alertReducer} from './alertReducer'\nimport {SHOW_ALERT, HIDE_ALERT} from '../types'\n\nexport const AlertState = ({ children }) => {\n    const [state, dispatch] = useReducer(alertReducer, {visible: false})\n\n    const show = (text, type = 'warning') => {\n        dispatch({\n            type: SHOW_ALERT, \n            payload: {text, type}\n        })\n    }\n    \n    const hide = () => dispatch({type: HIDE_ALERT})\n\n    return (\n        <AlertContext.Provider value={{\n            show, hide, \n            alert: state\n        }}>\n            {children}\n        </AlertContext.Provider>\n    )\n}","import { SHOW_LOADER, ADD_NOTE, FETCH_NOTES, REMOVE_NOTE } from \"../types\"\n\nconst handlers = {\n    [SHOW_LOADER]: state => {\n        console.log(\"I AM SHOW\")\n        return {...state, loading: true}}, \n    [ADD_NOTE]: (state, {payload}) => {\n        console.log(\"I AM ADD\")\n        return {\n        ...state,\n        notes: [...state.notes, payload]\n    }},\n    [FETCH_NOTES]: (state, {payload}) => {\n        console.log(\" I AM FETCH\")\n        return {...state, notes: payload, loading: false}},\n    [REMOVE_NOTE]: (state, {payload}) => {\n        console.log(\"I AM REMOVE\")\n        return {\n        ...state,\n        notes: state.notes.filter(note => note.id !== payload)\n    }},\n    DEFAULT: state => { \n        console.log(\"I AM DEFAULT\")\n        return state\n    }\n}\n\nexport const firebaseReducer = (state, action) => {\n    const handle = handlers[action.type] || handlers.DEFAULT\n    return handle(state, action)\n}","import React, { useReducer } from 'react'\nimport axios from 'axios'\nimport { FirebaseContext } from './firebaseContext'\nimport { firebaseReducer } from './firebaseReducer'\nimport { SHOW_LOADER, REMOVE_NOTE, ADD_NOTE, FETCH_NOTES } from '../types'\n\nconst url = process.env.REACT_APP_DB_URL\n\nexport const FirebaseState = ({ children }) => {\n    const initialState = {\n        notes: [],\n        loading: false\n    }\n    \n    const [state, dispatch] = useReducer(firebaseReducer, initialState)\n    \n    const showLoader = () => dispatch({type: SHOW_LOADER})\n\n    const fetchNotes = async () => {\n        console.log(\"I am in the fetch notes near loader\")\n        showLoader()\n        try {\n            const res = await axios.get(`${url}/notes.json`)\n            const payload = Object.keys(res.data).map(key => {\n                return {\n                    ...res.data[key], \n                    id: key\n                }\n            })\n\n            dispatch({type: FETCH_NOTES, payload})\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    const addNote = async title => {\n        const note = {\n            title, date: new Date().toJSON()\n        }\n        \n        try { \n            const res = await axios.post(`${url}/notes.json`, note)\n            \n            const payload = {\n                ...note, \n                id: res.data.name\n            }\n            dispatch({type: ADD_NOTE, payload})\n        } catch (e) {\n            throw new Error(e.message)\n        }       \n    }\n\n    const removeNote = async id => {\n        await axios.delete(`${url}/notes/${id}.json`)\n        dispatch({\n            type: REMOVE_NOTE, \n            payload: id\n        })\n    }\n\n\n    return (\n        <FirebaseContext.Provider value={{\n            showLoader, addNote, removeNote, fetchNotes, \n            loading: state.loading, \n            notes: state.notes\n        }}>\n            {children}\n        </FirebaseContext.Provider>\n    )\n}","import React from 'react'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport { Home } from './pages/Home'\nimport { About } from './pages/About'\nimport { Navbar } from './components/Navbar'\nimport { Alert } from './components/Alert'\nimport { AlertState } from './context/alert/AlertState'\nimport { FirebaseState } from './context/firebase/FirebaseState'\n\nfunction App() {\n  return (\n    <FirebaseState>\n      <AlertState>\n        <BrowserRouter>\n          <Navbar />\n          <div className=\"App\">\n            <Alert />\n              <Switch>\n                <Route path={'/'} exact component={Home}/>\n                <Route path={'/about'} component={About}/>\n              </Switch>\n          </div>\n        </BrowserRouter>\n      </AlertState>\n    </FirebaseState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}